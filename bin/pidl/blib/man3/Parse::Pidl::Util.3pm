.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Parse::Pidl::Util 3pm"
.TH Parse::Pidl::Util 3pm "2016-11-15" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Pidl::Util \- Generic utility functions for pidl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Parse::Pidl::Util;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple module that contains a couple of trivial helper functions 
used throughout the various pidl modules.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBMyDumper\fR a dumper wrapper to prevent dependence on the Data::Dumper module unless we actually need it" 4
.IX Item "MyDumper a dumper wrapper to prevent dependence on the Data::Dumper module unless we actually need it"
.PD 0
.IP "\fBhas_property\fR see if a pidl property list contains a given property" 4
.IX Item "has_property see if a pidl property list contains a given property"
.IP "\fBproperty_matches\fR see if a pidl property matches a value" 4
.IX Item "property_matches see if a pidl property matches a value"
.IP "\fBis_constant\fR return 1 if the string is a C constant" 4
.IX Item "is_constant return 1 if the string is a C constant"
.ie n .IP "\fBmake_str\fR return a """" quoted string, unless already quoted" 4
.el .IP "\fBmake_str\fR return a ``'' quoted string, unless already quoted" 4
.IX Item "make_str return a """" quoted string, unless already quoted"
.ie n .IP "\fBunmake_str\fR unquote a """" quoted string" 4
.el .IP "\fBunmake_str\fR unquote a ``'' quoted string" 4
.IX Item "unmake_str unquote a """" quoted string"
.IP "\fBprint_uuid\fR Print C representation of a \s-1UUID.\s0" 4
.IX Item "print_uuid Print C representation of a UUID."
.IP "\fBParseExpr\fR Interpret an \s-1IDL\s0 expression, substituting particular variables." 4
.IX Item "ParseExpr Interpret an IDL expression, substituting particular variables."
.IP "\fBParseExprExt\fR Interpret an \s-1IDL\s0 expression, substituting particular variables. Can call callbacks when pointers are being dereferenced or variables are being used." 4
.IX Item "ParseExprExt Interpret an IDL expression, substituting particular variables. Can call callbacks when pointers are being dereferenced or variables are being used."
.IP "\fBgenpad\fR return an empty string consisting of tabs and spaces suitable for proper indent of C\-functions." 4
.IX Item "genpad return an empty string consisting of tabs and spaces suitable for proper indent of C-functions."
